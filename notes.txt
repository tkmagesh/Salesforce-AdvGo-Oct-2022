Magesh Kuppan

Schedule:
    Tea Break   : 10:30 AM (20 mins)
    Lunch Break : 12:00 PM (1 hr)
    Tea Break   : 3:00 PM (20 mins)
    Wind up     : 5:00 PM

Repository
    https://github.com/tkmagesh/Salesforce-Advgo-oct-2022

GRPC


Interprocess Communication
    Where?
    Protocol?
        Transport (TCP)
        Application
            Request & Response
    Data Format

    CORBA

    Web Services
        Where ?
            IP
        TCP
        HTTP (Text Friendly)
        XML
            SOAP (Simple Object Access Protocol)
            WSDL
    
    Data as a Resource (REST)
        Where?
            URL
        What?
            GET
            POST
            PUT
            PATCH
            DELETE
        Data
            XML
            JSON

Microservices
    

GRPC Tools
     Installation
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

        (when the above is installed, executables are created in the gopath/bin folder. Make sure this path is set in environment variables)

        Windows
            Install the binaries from https://github.com/protocolbuffers/protobuf/releases/

        Mac
            brew install protoc-gen-go
            brew install protoc-gen-go-grpc

        Verification
            protoc --version

        Steps:
            1. Define the contracts
                Service Contract
                Operation Contract
                Data Contracts
            2. Generate the proxy & stub
                protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto
            3. Implement the service
            4. Host the service
            5. Implement the client

        Communication Patterns
            1. Request / Response
            2. Client Streaming
            3. Server Streaming
            4. Bidirectional Streaming

Http Services
    1. net/http
    2. 3rd party router libraries
    3. Web Frameworks
    4. Microservices Frameworks


ServerMux
/ => index()
/products => productsHandler()
/customers => customersHandler()

func productsHandler(res http.ResponseWriter req *http.Request){
    switch req.Method {
        case "GET":
            //get the data from db
            //serialize the data
            //send the response

        case "POST":
            //deserialize the data from the request
            //process
            //serialize the response
            //send the response
        case "PUT":

    }
}

router
router('/products', productsGet).Methods('GET')

Web Frameworks
    data serialization
    middlewares
    logging

Microservices Frameworks
